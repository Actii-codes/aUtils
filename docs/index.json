[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/utils.mjs",
    "content": "\r\n/**\r\n* A utilities class\r\n* @class UtilsSingleton\r\n* @version {@versionPlaceholder}\r\n* @license Utils is free software, available under the terms of a MIT style License.\r\n* @author https://github.com/doubleactii\r\n* Copyright (c) 2023 Evitca Studio\r\n*/\r\nclass UtilsSingleton {\r\n\tconstructor() {\r\n\t\t/**\r\n\t\t * Object storing all color objects being transitioned at the moment\r\n\t\t * @private\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.transitions = {};\r\n\t\t/**\r\n\t\t * An array storing all the reserved unique IDS\r\n\t\t * @private\r\n\t\t * @type {Array}\r\n\t\t */\r\n\t\tthis.storedIDs = [];\r\n\t}\r\n\t/**\r\n\t * Generates a random decimal number between two numbers with a specified number of decimal places.\r\n\t * \r\n\t * @param {number} pNum1 - The first number to use for generating the random decimal number.\r\n\t * @param {number} pNum2 - The second number to use for generating the random decimal number.\r\n\t * @param {number} [pPlaces=1] - The number of decimal places to include in the generated random decimal number. Defaults to 1 if not provided.\r\n\t * @returns {number} A random decimal number between the two numbers with the specified number of decimal places.\r\n\t */\r\n\tdecimalRand(pNum1, pNum2, pPlaces = 1) {\r\n\t\tconst result = Number((Math.random() * (pNum1 - pNum2) + pNum2).toFixed(pPlaces));\r\n\t\treturn (result >= 1 ? Math.floor(result) : result);\r\n\t}\r\n\t/**\r\n\t * Generates a random decimal number between two numbers with a specified number of decimal places.\r\n\t * \r\n\t * @param {number} pNum1 - The first number to use for generating the random decimal number.\r\n\t * @param {number} pNum2 - The second number to use for generating the random decimal number.\r\n\t * @returns {number} A random decimal number between the two numbers with the specified number of decimal places.\r\n\t */\r\n\trand(pNum1, pNum2) {\r\n\t\tconst result = Number((Math.random() * (pNum1 - pNum2) + pNum2));\r\n\t\treturn Math.round(result);\r\n\t}\r\n\t/**\r\n\t * Calculates the percentage of a value relative to a total value.\r\n\t * \r\n\t * @param {number} pValue - The value to calculate the percentage of.\r\n\t * @param {number} pTotalValue - The total value to calculate the percentage relative to.\r\n\t * @returns {number} The percentage of the value relative to the total value.\r\n\t */\r\n\tgetPercentage(pValue, pTotalValue) {\r\n\t\treturn (100 * pValue) / pTotalValue;\r\n\t}\r\n\t/**\r\n\t * Clamps a number between a minimum and maximum value.\r\n\t * \r\n\t * @param {number} pNumber - The number to clamp.\r\n\t * @param {number} [pMin=0] - The minimum value to clamp the number to. Defaults to 0 if not provided.\r\n\t * @param {number} [pMax=1] - The maximum value to clamp the number to. Defaults to 1 if not provided.\r\n\t * @returns {number} The clamped number between the minimum and maximum values.\r\n\t */\r\n\tclamp(pNumber, pMin = 0, pMax = 1) {\r\n\t\treturn Math.max(pMin, Math.min(pNumber, pMax));\r\n\t}\r\n\t/**\r\n\t * Linearly interpolates between two values by a specified amount.\r\n\t * \r\n\t * @param {number} pStart - The start value to interpolate from.\r\n\t * @param {number} pEnd - The end value to interpolate to.\r\n\t * @param {number} pAmount - The amount to interpolate between the start and end values.\r\n\t * @returns {number} The interpolated value between the start and end values based on the specified amount.\r\n\t */\r\n\tlerp(pStart, pEnd, pAmount) {\r\n\t\treturn (1-pAmount)*pStart+pAmount*pEnd;\r\n\t}\r\n\t/**\r\n\t * Linearly interpolates between two values by a specified amount and returns the result as a floored integer.\r\n\t * \r\n\t * @param {number} pStart - The start value to interpolate from.\r\n\t * @param {number} pEnd - The end value to interpolate to.\r\n\t * @param {number} pAmount - The amount to interpolate between the start and end values.\r\n\t * @returns {number} The interpolated value between the start and end values based on the specified amount, rounded down to the nearest integer.\r\n\t */\r\n\tflooredLerp(pStart, pEnd, pAmount) {\r\n\t\treturn Math.floor(this.lerp(pStart, pEnd, pAmount));\r\n\t}\r\n\t/**\r\n\t * Rounds a number to a specified number of decimal places.\r\n\t * \r\n\t * @param {number} pNumber - The number to round.\r\n\t * @param {number} [pPlace=1] - The number of decimal places to round to. Defaults to 1 if not provided.\r\n\t * @returns {number} The rounded number to the specified number of decimal places.\r\n\t */\r\n\tround(pNumber, pPlace=1) {\r\n\t\treturn Math.round(pPlace * pNumber) / pPlace;\r\n\t}\r\n\t/**\r\n\t * Normalizes a value between a minimum and maximum value.\r\n\t * \r\n\t * @param {number} pVal - The value to normalize.\r\n\t * @param {number} pMin - The minimum value for normalization.\r\n\t * @param {number} pMax - The maximum value for normalization.\r\n\t * @returns {number} The normalized value between 0 and 1 based on the input value's position between the minimum and maximum values.\r\n\t * If the difference between pMax and pMin is 0, returns 1 to avoid dividing by zero.\r\n\t */\r\n\tnormalize(pVal, pMin, pMax) {\r\n\t\tif (pMax - pMin === 0) return 1;\r\n\t\treturn (pVal - pMin) / (pMax - pMin);\r\n\t}\r\n\t/**\r\n\t * Checks if a value is within a range of minimum and maximum values (inclusive).\r\n\t * \r\n\t * @param {number} pVal - The value to check.\r\n\t * @param {number} pMin - The minimum value of the range to check against.\r\n\t * @param {number} pMax - The maximum value of the range to check against.\r\n\t * @returns {boolean} True if the value is within the range (inclusive), false otherwise.\r\n\t */\r\n\twithin(pVal, pMin, pMax) {\r\n\t\treturn pVal >= pMin && pVal <= pMax;\r\n\t}\r\n\t/**\r\n\t * Formats a number by rounding it to the nearest integer and adding commas to separate thousands places.\r\n\t * \r\n\t * @param {number} pNum - The number to format.\r\n\t * @returns {string} A string representation of the formatted number.\r\n\t */\r\n\tformatIntegerWithCommas(pNum) {\r\n\t\treturn pNum.toFixed().toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1,');\r\n\t}\r\n\t/**\r\n\t * Converts degrees to radians.\r\n\t * \r\n\t * @param {number} pDegrees - The angle in degrees.\r\n\t * @returns {number} The angle in radians.\r\n\t */\r\n\ttoRadians(pDegrees) {\r\n\t\treturn pDegrees * (Math.PI / 180);\r\n\t}\r\n\t/**\r\n\t * Converts radians to degrees.\r\n\t * \r\n\t * @param {number} pRadians - The angle in radians.\r\n\t * @returns {number} The angle in degrees.\r\n\t */\r\n\ttoDegrees(pRadians) {\r\n\t\treturn pRadians * (180 / Math.PI);\r\n\t}\r\n\t/**\r\n\t * Returns a random element from the given array.\r\n\t * \r\n\t * @param {Array} pArray - The input array.\r\n\t * @returns {*} A random element from the array.\r\n\t */\r\n\tpick(pArray) {\r\n\t\tconst randomIndex = Math.floor(Math.random() * pArray.length);\r\n\t\treturn pArray[randomIndex];\r\n\t}\r\n\t/**\r\n\t * Removes properties from an object except those listed in the exclude array.\r\n\t * \r\n\t * @param {object} pObject - The object to remove properties from.\r\n\t * @param {Array} pExclude - The array of property names to exclude from removal.\r\n\t*/\r\n\tremoveProperties(pObject, pExclude) {\r\n\t\tif (typeof(pObject) === 'object') {\r\n\t\t\tfor (const prop in pObject) {\r\n\t\t\t\t// Do not reset these properties.\r\n\t\t\t\tif (Array.isArray(pExclude) && pExclude.includes(prop)) continue;\r\n\t\t\t\tif (pObject.hasOwnProperty(prop)) {\r\n\t\t\t\t\tdelete pObject[prop];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\t\r\n\t}\r\n\t/**\r\n\t * Returns true with probability proportional to the given number.\r\n\t * The higher the number, the higher the chance of returning true.\r\n\t * \r\n\t * @param {number} pChance - The probability value, between 0 and 100 (inclusive).\r\n\t * @returns {boolean} - Returns true or false, based on the probability value.\r\n\t */\r\n\tprob(pChance) {\r\n\t\tif (pChance <= 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tif (pChance >= 100) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\tconst randomNumber = Math.floor(Math.random() * 100) + 1;\r\n\t\treturn randomNumber <= pChance;\r\n\t}\r\n\t/**\r\n\t * Gets the inverse direction of the direction passed\r\n\t * \r\n\t * @param {string} pDir - The direction to get the inverse of.\r\n\t * @returns {string} The inverse direction\r\n\t */\r\n\tgetInverseDirection(pDir) {\r\n\t\tswitch (pDir) {\r\n\t\t\tcase 'north':\r\n\t\t\t\treturn 'south';\r\n\t\t\tcase 'south':\r\n\t\t\t\treturn 'north';\r\n\t\t\tcase 'east':\r\n\t\t\t\treturn 'west';\r\n\t\t\tcase 'west':\r\n\t\t\t\treturn 'east';\r\n\t\t\tcase 'northeast':\r\n\t\t\t\treturn 'southwest';\r\n\t\t\tcase 'northwest':\r\n\t\t\t\treturn 'southeast';\r\n\t\t\tcase 'southeast':\r\n\t\t\t\treturn 'northwest';\r\n\t\t\tcase 'southwest':\r\n\t\t\t\treturn 'northeast';\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error(`The direction ${pDir} is not supported.`);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Calculates the angle (in radians) from a given direction.\r\n\t * \r\n\t * @param {string} pDir - The direction to calculate the angle from.\r\n\t * @returns {number} The angle (in radians) associated with the given direction.\r\n\t * @throws {Error} Throws an error if the direction is not recognized.\r\n\t */\r\n\tgetAngleFromDirection(pDir) {\r\n\t\tswitch (pDir) {\r\n\t\t\tcase 'north':\r\n\t\t\t\treturn (Math.PI / 2);\r\n\t\t\tcase 'south':\r\n\t\t\t\treturn (Math.PI * 3) / 2;\r\n\t\t\tcase 'east':\r\n\t\t\t\treturn (Math.PI * 2);\r\n\t\t\tcase 'west':\r\n\t\t\t\treturn Math.PI;\r\n\t\t\tcase 'northwest':\r\n\t\t\t\treturn (Math.PI * 3) / 4;\r\n\t\t\tcase 'northeast':\r\n\t\t\t\treturn Math.PI / 4;\r\n\t\t\tcase 'southwest':\r\n\t\t\t\treturn (Math.PI * 5) / 4;\r\n\t\t\tcase 'southeast':\r\n\t\t\t\treturn (Math.PI * 7) / 4;\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.error(`The direction ${pDir} is not supported.`);\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Centers a rectangle (defined by its dimensions) within a parent rectangle.\r\n\t *\r\n\t * @param {number} pChildWidth - The width of the child rectangle.\r\n\t * @param {number} pChildHeight - The height of the child rectangle.\r\n\t * @param {number} pParentWidth - The width of the parent rectangle.\r\n\t * @param {number} pParentHeight - The height of the parent rectangle.\r\n\t * @param {number} pParentX - The x-coordinate of the parent rectangle.\r\n\t * @param {number} pParentY - The y-coordinate of the parent rectangle.\r\n\t * @returns {Object} An object representing the new coordinates of the centered rectangle: { x: centerX, y: centerY }.\r\n\t *\r\n\t * @example\r\n\t * const childWidth = 50;\r\n\t * const childHeight = 30;\r\n\t * const parentWidth = 100;\r\n\t * const parentHeight = 80;\r\n\t * const parentX = 20;\r\n\t * const parentY = 10;\r\n\t * const centeredCoordinates = centerRectangleOnParent(childWidth, childHeight, parentWidth, parentHeight, parentX, parentY);\r\n\t * // Returns {x: 45, y: 35}\r\n\t */\r\n\tcenterRectangleOnParent(pChildWidth, pChildHeight, pParentWidth, pParentHeight, pParentX, pParentY) {\r\n\t\tconst centerX = pParentX + ((pParentWidth - pChildWidth) / 2);\r\n\t\tconst centerY = pParentY + ((pParentHeight - pChildHeight) / 2);\r\n\t\treturn { x: centerX, y: centerY };\r\n\t}\r\n\t/**\r\n\t * Gets the angle between two points\r\n\t * \r\n\t * @param {Object} pStartPoint - The starting point\r\n\t * @param {Object} pEndPoint - The ending point\r\n\t * @returns {number} The angle between the starting point and the ending point\r\n\t */\r\n\tgetAngle(pStartPoint, pEndPoint) {\r\n\t\tconst y = pStartPoint.y - pEndPoint.y;\r\n\t\tconst x = pStartPoint.x - pEndPoint.x;\r\n\t\treturn -Math.atan2(y, x) - Math.PI;\r\n\t}\r\n\t/**\r\n\t * Calculates the Euclidean distance between two points in a two-dimensional space.\r\n\t *\r\n\t * @param {Object} pStartPoint - The starting point with x and y coordinates.\r\n\t * @param {number} pStartPoint.x - The x-coordinate of the starting point.\r\n\t * @param {number} pStartPoint.y - The y-coordinate of the starting point.\r\n\t * @param {Object} pEndPoint - The ending point with x and y coordinates.\r\n\t * @param {number} pEndPoint.x - The x-coordinate of the ending point.\r\n\t * @param {number} pEndPoint.y - The y-coordinate of the ending point.\r\n\t * @returns {number} The Euclidean distance between the two points.\r\n\t *\r\n\t * @example\r\n\t * const startPoint = { x: 1, y: 2 };\r\n\t * const endPoint = { x: 4, y: 6 };\r\n\t * const distance = getDistance(startPoint, endPoint); // 5\r\n\t * // Returns the Euclidean distance between the points (1, 2) and (4, 6).\r\n\t */\r\n\tgetDistance(pStartPoint, pEndPoint) {\r\n\t\tconst y = (pStartPoint.y - pEndPoint.y);\r\n\t\tconst x = (pStartPoint.x - pEndPoint.x);\r\n\t\treturn Math.sqrt((x * x) + (y * y));\r\n\t}\r\n\t/**\r\n\t * Calculates the new position of a point based on distance and angle.\r\n\t *\r\n\t * @param {Object} pPoint - The initial position of the point with x and y coordinates.\r\n\t * @param {number} pPoint.x - The initial x-coordinate of the point.\r\n\t * @param {number} pPoint.y - The initial y-coordinate of the point.\r\n\t * @param {number} pDistance - The distance by which to move the point.\r\n\t * @param {number} pAngle - The angle (in radians) at which to move the point.\r\n\t * @returns {Object} The new position of the point after moving by the specified distance and angle.\r\n\t *\r\n\t * @example\r\n\t * const initialPosition = { x: 10, y: 20 };\r\n\t * const distance = 5;\r\n\t * const angleInRadians = 0.785398; // 45 degrees\r\n\t * const newPosition = calculateNewPositionFromDistanceAndAngle(initialPosition, distance, angleInDegrees);\r\n\t * // Returns the new position of the point after moving by 5 units at a 45-degree angle.\r\n\t */\r\n\tcalculateNewPositionFromDistanceAndAngle(pPoint, pDistance, pAngle) {\r\n\t\tconst newPosition = { x: 0, y: 0 };\r\n\t\tnewPosition.x = pPoint.x - pDistance * Math.cos(pAngle);\r\n\t\tnewPosition.y = pPoint.y - pDistance * Math.sin(pAngle);\r\n\t\treturn newPosition;\r\n\t};\r\n\t/**\r\n\t * Calculates the proportional length based on a current value, a maximum value, and a specified total length.\r\n\t *\r\n\t * @param {number} pCurrent - The current value to be scaled.\r\n\t * @param {number} pMax - The maximum value for scaling.\r\n\t * @param {number} pTotalLength - The specified total length.\r\n\t * @returns {number} The proportional length based on the current value, maximum value, and total length.\r\n\t *\r\n\t * @example\r\n\t * const current = 25;\r\n\t * const max = 50;\r\n\t * const totalLength = 100;\r\n\t * const proportionalLength = calculateProportionalLength(current, max, totalLength); // 50\r\n\t * // Returns the proportional length based on the current value, maximum value, and total length.\r\n\t */\r\n\tcalculateProportionalLength(pCurrent, pMax, pTotalLength) {\r\n\t\treturn (pCurrent / pMax) * pTotalLength;\r\n\t}\r\n\t/**\r\n\t * Calculates the compass direction based on the given angle.\r\n\t *\r\n\t * @param {number} pAngle - The angle in radians.\r\n\t * @returns {string} The compass direction (e.g., 'east', 'southeast', 'south', etc.).\r\n\t *\r\n\t * @example\r\n\t * const angle = Math.PI / 4; // 45 degrees in radians\r\n\t * const direction = getDirection(angle); // Returns 'northeast'\r\n\t */\r\n\tgetDirection(pAngle) {\r\n\t\tconst degree = Math.abs(Math.floor(((pAngle * (180 / Math.PI)) / 45) + 0.5));\r\n\t\tconst compassDirections = ['east', 'northeast', 'north', 'northwest', 'west', 'southwest', 'south', 'southeast'];\r\n\t\treturn compassDirections[(degree % 8)];\r\n\t}\r\n\t/**\r\n\t * Calculates the linear decay of a variable over time.\r\n\t *\r\n\t * @param {number} pInitialValue - The initial value of the variable.\r\n\t * @param {number} pCurrentTime - The current time at which to calculate the variable value.\r\n\t * @param {number} pMaxTime - The maximum time for the decay process.\r\n\t * @param {number} [pDecayRate=0.5] - The decay rate (default is 0.5).\r\n\t * @returns {number} The remaining value of the variable after linear decay.\r\n\t *\r\n\t * @example\r\n\t * const initialValue = 100;\r\n\t * const currentTime = 50;\r\n\t * const maxTime = 1000;\r\n\t * const decayRate = 0.3;\r\n\t * const remainingValue = linearDecay(initialValue, currentTime, maxTime, decayRate);\r\n\t * // Returns the remaining value after linear decay.\r\n\t */\r\n\tlinearDecay(pInitialValue, pCurrentTime, pMaxTime, pDecayRate = 0.5) {\r\n\t\t// Calculate the variable value at the current time\r\n\t\tconst proportionOfTimePassed = pCurrentTime / pMaxTime;\r\n\t\tconst remainingValue = Math.max(pInitialValue * (1 - (proportionOfTimePassed * pDecayRate)), 1);\r\n\t\treturn remainingValue;\r\n\t}\r\n\t/**\r\n\t * Generates a unique id\r\n\t * \r\n\t * @param {string} pIDLength - The length of the ID to create \r\n\t * @returns A unique ID\r\n\t */\r\n\tgenerateID(pIDLength = 7) {\r\n\t\tconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\t\tconst makeID = function() {\r\n\t\t\tlet ID = '';\r\n\t\t\tfor (let i = 0; i < pIDLength; i++) {\r\n\t\t\t\tID += chars.charAt(Math.floor(Math.random() * chars.length));\r\n\t\t\t}\r\n\t\t\treturn ID;\r\n\t\t}\r\n\t\tlet ID = makeID();\r\n\t\twhile(this.storedIDs.includes(ID)) {\r\n\t\t\tID = makeID();\r\n\t\t}\r\n\t\tthis.storedIDs.push(ID);\r\n\t\treturn ID;\r\n\t}\r\n\t/**\r\n\t * Converts a color in decimal format into hex format\r\n\t * \r\n\t * @param {number} pDecimal - The color in decimal format\r\n\t * @param {number} pChars - The length to make the hex string\r\n\t * @returns The decimal color converted into hex format\r\n\t */\r\n\tdecimalToHex(pDecimal, pChars = 6) {\r\n\t\treturn '#' + (pDecimal + Math.pow(16, pChars)).toString(16).slice(-pChars).toUpperCase();\r\n\t}\r\n\t/**\r\n\t * Add intensity to this color to get a brighter or dimmer effect\r\n\t * \r\n\t * @param {string|number} pColor - Color in hex format or decimal format\r\n\t * @param {number} pPercent - The percent of brightness to add to this color\r\n\t * @returns \r\n\t */\r\n\taddIntensity(pColor, pPercent) {\r\n\t\tconst rgb = this.grabColor(pColor).rgbArray;\r\n\t\tconst r = rgb[0];\r\n\t\tconst g = rgb[1];\r\n\t\tconst b = rgb[2];\r\n\t\tlet rr = 0;\r\n\t\tlet rg = 0;\r\n\t\tlet rb = 0;\r\n\t\tconst black = (r === 0 && g === 0 && b === 0) ? true : false;\r\n\t\tif (r || black) rr = r + Math.floor((255 * pPercent) / 100);\r\n\t\tif (g || black) rg = g + Math.floor((255 * pPercent) / 100);\r\n\t\tif (b || black) rb = b + Math.floor((255 * pPercent) / 100);\r\n\t\treturn this.grabColor(this.clamp(rr, 0, 255), this.clamp(rg, 0, 255), this.clamp(rb, 0, 255)).hex\r\n\t}\r\n\t/**\r\n\t * Converts an RGB color value to a hexadecimal color value.\r\n\t * \r\n\t * @param {number} pR - The red component of the RGB color value (0-255).\r\n\t * @param {number} pG - The green component of the RGB color value (0-255).\r\n\t * @param {number} pB - The blue component of the RGB color value (0-255).\r\n\t*/\r\n\trgbToHex(pR, pG, pB) {\r\n\t\tconst r = this.clamp(pR, 0, 255);\r\n\t\tconst g = this.clamp(pG, 0, 255);\r\n\t\tconst b = this.clamp(pB, 0, 255);\r\n\t\tconst craftString = function(pColor) {\r\n\t\t\treturn pColor.toString(16).padStart(2, '0');\r\n\t\t}\r\n\t\tconst hex = '#' + [r, g, b].map(craftString).join('');\r\n\t\treturn hex;\t\t\r\n\t}\r\n\t/**\r\n\t * Converts a hexadecimal color value to an RGB color value.\r\n\t * \r\n\t * @param {string} pHex - The hexadecimal color value to convert (e.g. \"#FF0000\" for red).\r\n\t * @returns {Array} - An array containing the red, green, and blue components of the RGB color value.\r\n\t*/\r\n\thexToRgb(pHex) {\r\n\t\tpHex = pHex.replace('#', '');\r\n\t\tif (pHex.length === 3) {\r\n\t\t\tpHex = pHex.replace(new RegExp('(.)', 'g'), '$1$1');\r\n\t\t}\r\n\t\tpHex = pHex.match(new RegExp('..', 'g'));\r\n\t\tconst r = this.clamp(parseInt(pHex[0], 16), 0, 255);\r\n\t\tconst g = this.clamp(parseInt(pHex[1], 16), 0, 255);\r\n\t\tconst b = this.clamp(parseInt(pHex[2], 16), 0, 255);\r\n\t\treturn [r, g, b];\r\n\t}\r\n\t/**\r\n\t * Converts RGB color values to a decimal value.\r\n\t * \r\n\t * @param {number} pR - The red component of the RGB color value (0-255).\r\n\t * @param {number} pG - The green component of the RGB color value (0-255).\r\n\t * @param {number} pB - The blue component of the RGB color value (0-255).\r\n\t*/\r\n\trgbToDecimal(pR, pG, pB) {\r\n\t\treturn (pR << 16 | pG << 8 | pB);\r\n\t}\r\n\t/**\r\n\t * Converts a hexadecimal color value to a decimal value.\r\n\t * \r\n\t * @param {string} pHex - The hexadecimal color value to convert (e.g. \"#FF0000\" for red).\r\n\t * @returns {number} - The decimal representation of the hexadecimal color value.\r\n\t*/\r\n\thexToDecimal(pHex) {\r\n\t\tpHex = pHex.replace('#', '');\r\n\t\treturn parseInt(pHex, 16);\r\n\t}\r\n\t/**\r\n\t * Convert a color to different formats or get a random color\r\n\t * \r\n\t * @param {string|number} pSwitch - A hex string representing a color (with or without the tag)\r\n\t * A color formatted in the decimal format. Or the r value of a rgb color.\r\n\t * @param {number} [g] g value of a rgb color\r\n\t * @param {number} [b] b value of a rgb color\r\n\t * @returns {ColorObject} A color object with various different export options.\r\n\t * hex, hexTagless, rgb, rgbArray, rgbObject, rgbNormal, decimal formats.\r\n\t */\r\n\tgrabColor(pSwitch = this.getRandomColor(), pG, pB) {\r\n\t\tlet hex, rgb;\r\n\t\t// Convert rgb to hex\r\n\t\tif (typeof(pSwitch) === 'number' && typeof(pG) === 'number' && typeof(pB) === 'number') {\r\n\t\t\thex = this.rgbToHex(pSwitch, pG, pB);\r\n\t\t} else {\r\n\t\t\t// Convert decimal to hex\r\n\t\t\tif (typeof(pSwitch) === 'number') {\r\n\t\t\t\tpSwitch = this.decimalToHex(pSwitch);\r\n\t\t\t}\r\n\t\t\thex = pSwitch;\r\n\t\t\t// Convert hex to rgb\r\n\t\t\trgb = this.hexToRgb(hex);\r\n\t\t}\r\n\t\treturn { \r\n\t\t\t'hex': hex.toLowerCase(), \r\n\t\t\t'hexTagless': hex.replace('#', '').toLowerCase(), \r\n\t\t\t'rgb': 'rgb('+rgb[0]+','+rgb[1]+','+rgb[2]+')', \r\n\t\t\t'rgbArray': rgb, \r\n\t\t\t'rgbObject': { 'r': rgb[0], 'g': rgb[1], 'b': rgb[2] }, \r\n\t\t\t'rgbNormal': [Math.round(rgb[0]/255 * 100) / 100, Math.round(rgb[1]/255 * 100) / 100, Math.round(rgb[2]/255 * 100) / 100], \r\n\t\t\t'decimal': this.hexToDecimal(hex) \r\n\t\t};\r\n\t}\r\n\t/**\r\n\t * Gets a random color\r\n\t * \r\n\t * @returns {string} A random color in the hex format\r\n\t */\r\n\tgetRandomColor() {\r\n\t\tconst chars = '0123456789ABCDEF';\r\n\t\tlet color = '#';\r\n\t\tfor (let i = 0; i < 6; i++) {\r\n\t\t\tcolor += chars[Math.floor(Math.random() * 16)];\r\n\t\t}\r\n\t\treturn color;\r\n\t}\r\n\t/**\r\n\t * Gets a random color between two colors\r\n\t * \r\n\t * @param {number|string} pColor1 - The first color to get a color between\r\n\t * @param {number|string} pColor2 - The second color to get a color between\r\n\t * @param {number} [pAmount=0.5] - The closer the random color will be to either input colors on a range of 0-1\r\n\t * 0 to 0.5 (closer to pColor1)\r\n\t * 0.5 to 1 (closer to pColor2)\r\n\t * @returns {string} A random color in the decimal format\r\n\t */\r\n\tgetRandomColorBetween(pColor1, pColor2, pAmount = 0.5) {\r\n\t\t// u is the amount of the lerp 0-1\r\n\t\treturn this.flooredLerp(this.grabColor(pColor1).decimal, this.grabColor(pColor2).decimal, pAmount);\r\n\t}\r\n\t/**\r\n\t * Transition a color to another color in pDuration time.\r\n\t * \r\n\t * @param {Object} pInstance - The instance to transition it's color property.\r\n\t * pInstance's color will be transitioned either via pInstance.color = newColor\r\n\t * or\r\n\t * pInstance.color.tint = newColor (if the color is defined as an object)\r\n\t * @param {string|number} pStartColor - The start color\r\n\t * @param {string|number} pEndColor - The end color\r\n\t * @param {number} pDuration - The duration of the transition\r\n\t * @param {Function} pIterativeCallback - Callback to call every tick of the transition\r\n\t * @param {Function} pEndCallback - Callback to call at the end of the transition\r\n\t * @returns An ID that references this transition to be passed to cancelTransition to stop an ongoing transition.\r\n\t */\r\n\ttransitionColor(pInstance, pStartColor='#000', pEndColor='#fff', pDuration=1000, pIterativeCallback, pEndCallback) {\r\n\t\t// Cannot use this API on the server\r\n\t\tif (!globalThis.window) return;\r\n\t\tconst iterativeCallback = typeof(pIterativeCallback) === 'function' ? pIterativeCallback : null;\r\n\t\tconst endCallback = typeof(pEndCallback) === 'function' ? pEndCallback : null;\r\n\t\tlet id;\r\n\t\tlet isParticle;\r\n\t\tlet isTintObject;\r\n\r\n\t\tif (pInstance) {\r\n\t\t\tid = pInstance.id ? pInstance.id : this.generateID();\r\n\t\t\tisParticle = (pInstance.type === 'GeneratedParticle');\r\n\t\t\tisTintObject = (typeof(pInstance.color) === 'object' && pInstance.color.constructor === Object ? true : false);\r\n\t\t\tif (this.transitions[id]) this.cancelTransitionColor(id);\r\n\t\t} else {\r\n\t\t\tid = this.generateID();\r\n\t\t}\r\n\t\t\t\r\n\t\tthis.transitions[id] = {\r\n\t\t\t'duration': pDuration,\r\n\t\t\t'timeTracker': isParticle ? pInstance.info.lifetime : 0\r\n\t\t};\r\n\r\n\t\tconst rgbStartColor = this.grabColor(pStartColor).rgbArray;\r\n\t\tconst rgbEndColor = this.grabColor(pEndColor).rgbArray;\r\n\r\n\t\tconst self = this;\r\n\t\tthis.transitions[id].step = (pTimeStamp) => {\r\n\t\t\tif (self.transitions[id]) {\r\n\t\t\t\tif (isParticle) {\r\n\t\t\t\t\tif (pInstance.info) {\r\n\t\t\t\t\t\tif (pInstance.info.owner) {\r\n\t\t\t\t\t\t\tif (pInstance.info.owner.settings.paused) {\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (self.transitions[id]) this.cancelTransitionColor(id);\r\n\t\t\t\t\t\treturn;\t\t\t\t\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst now = pTimeStamp;\r\n\t\t\t\tif (!self.transitions[id].lastTime) self.transitions[id].lastTime = now;\r\n\t\t\t\tconst elapsed = now - self.transitions[id].lastTime;\r\n\t\t\t\t// Time tracker is used rather than lastStamp - startStamp because this currently takes into account particles passed in (this will be removed in the future and use the former method)\r\n\t\t\t\tself.transitions[id].timeTracker += elapsed;\r\n\t\t\t\t// The max value of percentage is 1, so we clamp it at 1\r\n\t\t\t\tconst percentage = Math.min(self.transitions[id].timeTracker / self.transitions[id].duration, 1);\r\n\t\t\t\t\r\n\t\t\t\tconst r = parseInt(self.lerp(rgbStartColor[0], rgbEndColor[0], percentage), 10);\r\n\t\t\t\tconst g = parseInt(self.lerp(rgbStartColor[1], rgbEndColor[1], percentage), 10);\r\n\t\t\t\tconst b = parseInt(self.lerp(rgbStartColor[2], rgbEndColor[2], percentage), 10);\r\n\t\t\t\tconst color = self.grabColor(r, g, b);\r\n\r\n\t\t\t\tif (iterativeCallback) iterativeCallback(color);\r\n\r\n\t\t\t\tif (pInstance) {\r\n\t\t\t\t\tif (isTintObject) {\r\n\t\t\t\t\t\tpInstance.color.tint = color.decimal;\r\n\t\t\t\t\t\tpInstance.color = pInstance.color;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tpInstance.color = color.hex;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (percentage >= 1 || self.transitions[id].timeTracker >= pDuration) {\r\n\t\t\t\t\tif (self.transitions[id]) this.cancelTransitionColor(id);\r\n\t\t\t\t\tif (endCallback) endCallback(color);\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tself.transitions[id].req = globalThis.requestAnimationFrame(self.transitions[id].step);\r\n\t\t\t\tself.transitions[id].lastTime = now;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.transitions[id].req = globalThis.requestAnimationFrame(this.transitions[id].step);\r\n\t\treturn id;\r\n\t}\r\n\t/**\r\n\t * Cancels an ongoing transition\r\n\t * \r\n\t * @param {string} pID - The ID of the ongoing transition to cancel\r\n\t */\r\n\tcancelTransitionColor(pID) {\r\n\t\tif (this.transitions[pID]) {\r\n\t\t\tglobalThis.cancelAnimationFrame(this.transitions[pID].req);\r\n\t\t\tdelete this.transitions[pID];\r\n\t\t}\r\n\t}\r\n\t/**\r\n\t * Calculates the position of a point after rotating it around a center point by a given angle.\r\n\t * \r\n\t * @param {object} pRect - The rectangle object to rotate the point around.\r\n\t * pRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle.\r\n\t * @param {number} pTheta - The angle (in radians) to rotate the point by.\r\n\t * @param {object} pPoint - The point object to rotate around the center of the rectangle.\r\n\t * @param {number} pPoint.x - The x-coordinate of the point to rotate.\r\n\t * @param {number} pPoint.y - The y-coordinate of the point to rotate.\r\n\t * @returns {object} An object with the rotated point's new x and y coordinates.\r\n\t */\r\n\tgetPointRotated(pRect, pTheta, pPoint) {\r\n\t\t// cx, cy - center of square coordinates\r\n\t\t// x, y - coordinates of a corner point of the square\r\n\t\t// theta is the angle of rotation\r\n\t\tconst cx = pRect.x + pRect.width * (typeof(pRect.anchor) === 'object' && pRect.anchor.x ? pRect.anchor.x : 0.5);\r\n\t\tconst cy = pRect.y + pRect.height * (typeof(pRect.anchor) === 'object' && pRect.anchor.y ? pRect.anchor.y : 0.5);\r\n\r\n\t\t// translate point to origin\r\n\t\tconst tempX = pPoint.x - cx;\r\n\t\tconst tempY = pPoint.y - cy;\r\n\r\n\t\t// now apply rotation\r\n\t\tconst rotatedX = tempX*Math.cos(pTheta) - tempY*(-Math.sin(pTheta));\r\n\t\tconst rotatedY = tempX*(-Math.sin(pTheta)) + tempY*Math.cos(pTheta);\r\n\r\n\t\t// translate back\r\n\t\tconst x = rotatedX + cx;\r\n\t\tconst y = rotatedY + cy;\r\n\t\treturn { 'x': x, 'y': y };\r\n\t}\r\n\t/**\r\n\t * Calculates the position of a rectangle's corner points and center point after rotating it around a center point by a given angle.\r\n\t * \r\n\t * @param {object} pRect - The rectangle object to rotate the point around.\r\n\t * pRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle.\r\n\t * @param {number} pTheta - The angle (in radians) to rotate the point by.\r\n\t * @returns {object} An object with the rotated rectangle's new corner points and center points.\r\n\t */\r\n\tgetPointsOfRotatedRect(pRect, pTheta) {\r\n\t\tconst tl = this.getPointRotated(pRect, pTheta, { 'x': pRect.x, 'y': pRect.y });\r\n\t\tconst tr = this.getPointRotated(pRect, pTheta, { 'x': pRect.x + pRect.width, 'y': pRect.y });\r\n\t\tconst bl = this.getPointRotated(pRect, pTheta, { 'x': pRect.x, 'y': pRect.y + pRect.height });\r\n\t\tconst br = this.getPointRotated(pRect, pTheta, { 'x': pRect.x + pRect.width, 'y': pRect.y + pRect.height });\r\n\t\tconst center = this.getPointRotated(pRect, pTheta, { 'x': pRect.x + pRect.width / 2, 'y': pRect.y + pRect.height / 2 });\r\n\t\treturn { 'tl': tl, 'tr': tr, 'bl': bl, 'br': br, 'center': center };\r\n\t}\r\n}\r\nexport const Utils = new UtilsSingleton();\r\n",
    "static": true,
    "longname": "C:/Users/jared/Documents/Github/EUtils/src/utils.mjs",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "Utils",
    "memberof": "src/utils.mjs",
    "static": true,
    "longname": "src/utils.mjs~Utils",
    "access": "public",
    "export": true,
    "importPath": "utils/src/utils.mjs",
    "importStyle": "{Utils}",
    "description": null,
    "lineNumber": 712,
    "undocument": true,
    "type": {
      "types": [
        "src/utils.mjs~UtilsSingleton"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "UtilsSingleton",
    "memberof": "src/utils.mjs",
    "static": true,
    "longname": "src/utils.mjs~UtilsSingleton",
    "access": "public",
    "export": true,
    "importPath": "utils/src/utils.mjs",
    "importStyle": null,
    "description": "A utilities class",
    "lineNumber": 10,
    "version": "{@versionPlaceholder}",
    "pseudoExport": true,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "UtilsSingleton"
      },
      {
        "tagName": "@license",
        "tagValue": "Utils is free software, available under the terms of a MIT style License."
      },
      {
        "tagName": "@author",
        "tagValue": "https://github.com/doubleactii\nCopyright (c) 2023 Evitca Studio"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 51,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "transitions",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#transitions",
    "access": "private",
    "description": "Object storing all color objects being transitioned at the moment",
    "lineNumber": 17,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "storedIDs",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#storedIDs",
    "access": "private",
    "description": "An array storing all the reserved unique IDS",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "decimalRand",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#decimalRand",
    "access": "public",
    "description": "Generates a random decimal number between two numbers with a specified number of decimal places.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A random decimal number between the two numbers with the specified number of decimal places."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum1",
        "description": "The first number to use for generating the random decimal number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum2",
        "description": "The second number to use for generating the random decimal number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pPlaces",
        "description": "The number of decimal places to include in the generated random decimal number. Defaults to 1 if not provided."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random decimal number between the two numbers with the specified number of decimal places."
    }
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "rand",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#rand",
    "access": "public",
    "description": "Generates a random decimal number between two numbers with a specified number of decimal places.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} A random decimal number between the two numbers with the specified number of decimal places."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum1",
        "description": "The first number to use for generating the random decimal number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum2",
        "description": "The second number to use for generating the random decimal number."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "A random decimal number between the two numbers with the specified number of decimal places."
    }
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "getPercentage",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getPercentage",
    "access": "public",
    "description": "Calculates the percentage of a value relative to a total value.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The percentage of the value relative to the total value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pValue",
        "description": "The value to calculate the percentage of."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTotalValue",
        "description": "The total value to calculate the percentage relative to."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The percentage of the value relative to the total value."
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "clamp",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#clamp",
    "access": "public",
    "description": "Clamps a number between a minimum and maximum value.",
    "lineNumber": 66,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The clamped number between the minimum and maximum values."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNumber",
        "description": "The number to clamp."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "pMin",
        "description": "The minimum value to clamp the number to. Defaults to 0 if not provided."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pMax",
        "description": "The maximum value to clamp the number to. Defaults to 1 if not provided."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The clamped number between the minimum and maximum values."
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "lerp",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#lerp",
    "access": "public",
    "description": "Linearly interpolates between two values by a specified amount.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The interpolated value between the start and end values based on the specified amount."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStart",
        "description": "The start value to interpolate from."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEnd",
        "description": "The end value to interpolate to."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAmount",
        "description": "The amount to interpolate between the start and end values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The interpolated value between the start and end values based on the specified amount."
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "flooredLerp",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#flooredLerp",
    "access": "public",
    "description": "Linearly interpolates between two values by a specified amount and returns the result as a floored integer.",
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The interpolated value between the start and end values based on the specified amount, rounded down to the nearest integer."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStart",
        "description": "The start value to interpolate from."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEnd",
        "description": "The end value to interpolate to."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAmount",
        "description": "The amount to interpolate between the start and end values."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The interpolated value between the start and end values based on the specified amount, rounded down to the nearest integer."
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "round",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#round",
    "access": "public",
    "description": "Rounds a number to a specified number of decimal places.",
    "lineNumber": 98,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The rounded number to the specified number of decimal places."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNumber",
        "description": "The number to round."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "pPlace",
        "description": "The number of decimal places to round to. Defaults to 1 if not provided."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The rounded number to the specified number of decimal places."
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "normalize",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#normalize",
    "access": "public",
    "description": "Normalizes a value between a minimum and maximum value.",
    "lineNumber": 110,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The normalized value between 0 and 1 based on the input value's position between the minimum and maximum values.\nIf the difference between pMax and pMin is 0, returns 1 to avoid dividing by zero."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pVal",
        "description": "The value to normalize."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMin",
        "description": "The minimum value for normalization."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value for normalization."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The normalized value between 0 and 1 based on the input value's position between the minimum and maximum values.\nIf the difference between pMax and pMin is 0, returns 1 to avoid dividing by zero."
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "within",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#within",
    "access": "public",
    "description": "Checks if a value is within a range of minimum and maximum values (inclusive).",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the value is within the range (inclusive), false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pVal",
        "description": "The value to check."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMin",
        "description": "The minimum value of the range to check against."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value of the range to check against."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the value is within the range (inclusive), false otherwise."
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "formatIntegerWithCommas",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#formatIntegerWithCommas",
    "access": "public",
    "description": "Formats a number by rounding it to the nearest integer and adding commas to separate thousands places.",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A string representation of the formatted number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pNum",
        "description": "The number to format."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A string representation of the formatted number."
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "toRadians",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#toRadians",
    "access": "public",
    "description": "Converts degrees to radians.",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle in radians."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDegrees",
        "description": "The angle in degrees."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle in radians."
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "toDegrees",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#toDegrees",
    "access": "public",
    "description": "Converts radians to degrees.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle in degrees."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pRadians",
        "description": "The angle in radians."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle in degrees."
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "pick",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#pick",
    "access": "public",
    "description": "Returns a random element from the given array.",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*} A random element from the array."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pArray",
        "description": "The input array."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A random element from the array."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "removeProperties",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#removeProperties",
    "access": "public",
    "description": "Removes properties from an object except those listed in the exclude array.",
    "lineNumber": 168,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pObject",
        "description": "The object to remove properties from."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pExclude",
        "description": "The array of property names to exclude from removal."
      }
    ],
    "return": null
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "prob",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#prob",
    "access": "public",
    "description": "Returns true with probability proportional to the given number.\nThe higher the number, the higher the chance of returning true.",
    "lineNumber": 186,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} - Returns true or false, based on the probability value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChance",
        "description": "The probability value, between 0 and 100 (inclusive)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns true or false, based on the probability value."
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "getInverseDirection",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getInverseDirection",
    "access": "public",
    "description": "Gets the inverse direction of the direction passed",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The inverse direction"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pDir",
        "description": "The direction to get the inverse of."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The inverse direction"
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "getAngleFromDirection",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getAngleFromDirection",
    "access": "public",
    "description": "Calculates the angle (in radians) from a given direction.",
    "lineNumber": 231,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle (in radians) associated with the given direction."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pDir",
        "description": "The direction to calculate the angle from."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle (in radians) associated with the given direction."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "Throws an error if the direction is not recognized."
      }
    ]
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "centerRectangleOnParent",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#centerRectangleOnParent",
    "access": "public",
    "description": "Centers a rectangle (defined by its dimensions) within a parent rectangle.",
    "examples": [
      "const childWidth = 50;\nconst childHeight = 30;\nconst parentWidth = 100;\nconst parentHeight = 80;\nconst parentX = 20;\nconst parentY = 10;\nconst centeredCoordinates = centerRectangleOnParent(childWidth, childHeight, parentWidth, parentHeight, parentX, parentY);\n// Returns {x: 45, y: 35}"
    ],
    "lineNumber": 274,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} An object representing the new coordinates of the centered rectangle: { x: centerX, y: centerY }."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChildWidth",
        "description": "The width of the child rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChildHeight",
        "description": "The height of the child rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentWidth",
        "description": "The width of the parent rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentHeight",
        "description": "The height of the parent rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentX",
        "description": "The x-coordinate of the parent rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pParentY",
        "description": "The y-coordinate of the parent rectangle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "An object representing the new coordinates of the centered rectangle: { x: centerX, y: centerY }."
    }
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "getAngle",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getAngle",
    "access": "public",
    "description": "Gets the angle between two points",
    "lineNumber": 286,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle between the starting point and the ending point"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint",
        "description": "The starting point"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint",
        "description": "The ending point"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle between the starting point and the ending point"
    }
  },
  {
    "__docId__": 73,
    "kind": "method",
    "name": "getDistance",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getDistance",
    "access": "public",
    "description": "Calculates the Euclidean distance between two points in a two-dimensional space.",
    "examples": [
      "const startPoint = { x: 1, y: 2 };\nconst endPoint = { x: 4, y: 6 };\nconst distance = getDistance(startPoint, endPoint); // 5\n// Returns the Euclidean distance between the points (1, 2) and (4, 6)."
    ],
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The Euclidean distance between the two points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint",
        "description": "The starting point with x and y coordinates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint.x",
        "description": "The x-coordinate of the starting point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartPoint.y",
        "description": "The y-coordinate of the starting point."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint",
        "description": "The ending point with x and y coordinates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint.x",
        "description": "The x-coordinate of the ending point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndPoint.y",
        "description": "The y-coordinate of the ending point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The Euclidean distance between the two points."
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "calculateNewPositionFromDistanceAndAngle",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#calculateNewPositionFromDistanceAndAngle",
    "access": "public",
    "description": "Calculates the new position of a point based on distance and angle.",
    "examples": [
      "const initialPosition = { x: 10, y: 20 };\nconst distance = 5;\nconst angleInRadians = 0.785398; // 45 degrees\nconst newPosition = calculateNewPositionFromDistanceAndAngle(initialPosition, distance, angleInDegrees);\n// Returns the new position of the point after moving by 5 units at a 45-degree angle."
    ],
    "lineNumber": 330,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Object} The new position of the point after moving by the specified distance and angle."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint",
        "description": "The initial position of the point with x and y coordinates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.x",
        "description": "The initial x-coordinate of the point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.y",
        "description": "The initial y-coordinate of the point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDistance",
        "description": "The distance by which to move the point."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAngle",
        "description": "The angle (in radians) at which to move the point."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The new position of the point after moving by the specified distance and angle."
    }
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "calculateProportionalLength",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#calculateProportionalLength",
    "access": "public",
    "description": "Calculates the proportional length based on a current value, a maximum value, and a specified total length.",
    "examples": [
      "const current = 25;\nconst max = 50;\nconst totalLength = 100;\nconst proportionalLength = calculateProportionalLength(current, max, totalLength); // 50\n// Returns the proportional length based on the current value, maximum value, and total length."
    ],
    "lineNumber": 351,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The proportional length based on the current value, maximum value, and total length."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCurrent",
        "description": "The current value to be scaled."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMax",
        "description": "The maximum value for scaling."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTotalLength",
        "description": "The specified total length."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The proportional length based on the current value, maximum value, and total length."
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "getDirection",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getDirection",
    "access": "public",
    "description": "Calculates the compass direction based on the given angle.",
    "examples": [
      "const angle = Math.PI / 4; // 45 degrees in radians\nconst direction = getDirection(angle); // Returns 'northeast'"
    ],
    "lineNumber": 364,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} The compass direction (e.g., 'east', 'southeast', 'south', etc.)."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pAngle",
        "description": "The angle in radians."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The compass direction (e.g., 'east', 'southeast', 'south', etc.)."
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "linearDecay",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#linearDecay",
    "access": "public",
    "description": "Calculates the linear decay of a variable over time.",
    "examples": [
      "const initialValue = 100;\nconst currentTime = 50;\nconst maxTime = 1000;\nconst decayRate = 0.3;\nconst remainingValue = linearDecay(initialValue, currentTime, maxTime, decayRate);\n// Returns the remaining value after linear decay."
    ],
    "lineNumber": 386,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The remaining value of the variable after linear decay."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pInitialValue",
        "description": "The initial value of the variable."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pCurrentTime",
        "description": "The current time at which to calculate the variable value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pMaxTime",
        "description": "The maximum time for the decay process."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "pDecayRate",
        "description": "The decay rate (default is 0.5)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The remaining value of the variable after linear decay."
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "generateID",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#generateID",
    "access": "public",
    "description": "Generates a unique id",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "A unique ID"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pIDLength",
        "description": "The length of the ID to create"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "A unique ID"
    }
  },
  {
    "__docId__": 79,
    "kind": "method",
    "name": "decimalToHex",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#decimalToHex",
    "access": "public",
    "description": "Converts a color in decimal format into hex format",
    "lineNumber": 421,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "The decimal color converted into hex format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDecimal",
        "description": "The color in decimal format"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pChars",
        "description": "The length to make the hex string"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "The decimal color converted into hex format"
    }
  },
  {
    "__docId__": 80,
    "kind": "method",
    "name": "addIntensity",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#addIntensity",
    "access": "public",
    "description": "Add intensity to this color to get a brighter or dimmer effect",
    "lineNumber": 431,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pColor",
        "description": "Color in hex format or decimal format"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPercent",
        "description": "The percent of brightness to add to this color"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "rgbToHex",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#rgbToHex",
    "access": "public",
    "description": "Converts an RGB color value to a hexadecimal color value.",
    "lineNumber": 452,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pR",
        "description": "The red component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pG",
        "description": "The green component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pB",
        "description": "The blue component of the RGB color value (0-255)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "method",
    "name": "hexToRgb",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#hexToRgb",
    "access": "public",
    "description": "Converts a hexadecimal color value to an RGB color value.",
    "lineNumber": 468,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Array} - An array containing the red, green, and blue components of the RGB color value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pHex",
        "description": "The hexadecimal color value to convert (e.g. \"#FF0000\" for red)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "An array containing the red, green, and blue components of the RGB color value."
    }
  },
  {
    "__docId__": 83,
    "kind": "method",
    "name": "rgbToDecimal",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#rgbToDecimal",
    "access": "public",
    "description": "Converts RGB color values to a decimal value.",
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pR",
        "description": "The red component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pG",
        "description": "The green component of the RGB color value (0-255)."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pB",
        "description": "The blue component of the RGB color value (0-255)."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "hexToDecimal",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#hexToDecimal",
    "access": "public",
    "description": "Converts a hexadecimal color value to a decimal value.",
    "lineNumber": 495,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} - The decimal representation of the hexadecimal color value."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pHex",
        "description": "The hexadecimal color value to convert (e.g. \"#FF0000\" for red)."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The decimal representation of the hexadecimal color value."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "grabColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#grabColor",
    "access": "public",
    "description": "Convert a color to different formats or get a random color",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ColorObject} A color object with various different export options.\nhex, hexTagless, rgb, rgbArray, rgbObject, rgbNormal, decimal formats."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pSwitch",
        "description": "A hex string representing a color (with or without the tag)\nA color formatted in the decimal format. Or the r value of a rgb color."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "g",
        "description": "g value of a rgb color"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "b",
        "description": "b value of a rgb color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ColorObject"
      ],
      "spread": false,
      "description": "A color object with various different export options.\nhex, hexTagless, rgb, rgbArray, rgbObject, rgbNormal, decimal formats."
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "getRandomColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getRandomColor",
    "access": "public",
    "description": "Gets a random color",
    "lineNumber": 538,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A random color in the hex format"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A random color in the hex format"
    },
    "params": []
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "getRandomColorBetween",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getRandomColorBetween",
    "access": "public",
    "description": "Gets a random color between two colors",
    "lineNumber": 556,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} A random color in the decimal format"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pColor1",
        "description": "The first color to get a color between"
      },
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pColor2",
        "description": "The second color to get a color between"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "pAmount",
        "description": "The closer the random color will be to either input colors on a range of 0-1\n0 to 0.5 (closer to pColor1)\n0.5 to 1 (closer to pColor2)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "A random color in the decimal format"
    }
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "transitionColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#transitionColor",
    "access": "public",
    "description": "Transition a color to another color in pDuration time.",
    "lineNumber": 574,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "An ID that references this transition to be passed to cancelTransition to stop an ongoing transition."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "pInstance",
        "description": "The instance to transition it's color property.\npInstance's color will be transitioned either via pInstance.color = newColor\nor\npInstance.color.tint = newColor (if the color is defined as an object)"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pStartColor",
        "description": "The start color"
      },
      {
        "nullable": null,
        "types": [
          "string",
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndColor",
        "description": "The end color"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pDuration",
        "description": "The duration of the transition"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pIterativeCallback",
        "description": "Callback to call every tick of the transition"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "pEndCallback",
        "description": "Callback to call at the end of the transition"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "An ID that references this transition to be passed to cancelTransition to stop an ongoing transition."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "cancelTransitionColor",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#cancelTransitionColor",
    "access": "public",
    "description": "Cancels an ongoing transition",
    "lineNumber": 658,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pID",
        "description": "The ID of the ongoing transition to cancel"
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "getPointRotated",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getPointRotated",
    "access": "public",
    "description": "Calculates the position of a point after rotating it around a center point by a given angle.",
    "lineNumber": 675,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} An object with the rotated point's new x and y coordinates."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pRect",
        "description": "The rectangle object to rotate the point around.\npRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTheta",
        "description": "The angle (in radians) to rotate the point by."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint",
        "description": "The point object to rotate around the center of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.x",
        "description": "The x-coordinate of the point to rotate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pPoint.y",
        "description": "The y-coordinate of the point to rotate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object with the rotated point's new x and y coordinates."
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "getPointsOfRotatedRect",
    "memberof": "src/utils.mjs~UtilsSingleton",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils.mjs~UtilsSingleton#getPointsOfRotatedRect",
    "access": "public",
    "description": "Calculates the position of a rectangle's corner points and center point after rotating it around a center point by a given angle.",
    "lineNumber": 703,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} An object with the rotated rectangle's new corner points and center points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "pRect",
        "description": "The rectangle object to rotate the point around.\npRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "pTheta",
        "description": "The angle (in radians) to rotate the point by."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "An object with the rotated rectangle's new corner points and center points."
    }
  },
  {
    "kind": "index",
    "content": "# Utils\r\n\r\nUtils is a lightweight and versatile JavaScript utility class designed to provide commonly used functions for web development. It is a collection of various helper functions that can be used in a variety of projects.\r\n\r\n# Usage\r\nTo use Utils in your project, simply import it as follows:\r\n\r\n```js\r\nimport { Utils } from './utils.min.mjs';\r\n```\r\n\r\nYou can then call any of the functions available in the Utils class.\r\n\r\n# API\r\ndecimalRand(pNum1, pNum2, pPlaces)\r\n- Generates a random decimal number between **`pNum1`** and **`pNum2`** with **`pPlaces`** decimal places.\r\n\r\nrand(pNum1, pNum2)\r\n- Generates a random integer between **`pNum1`** and **`pNum2`**.\r\n\r\ngetPercentage(pValue, pTotalValue)\r\n- Calculates the percentage of **`pValue`** in relation to **`pTotalValue`**.\r\n\r\nclamp(pNumber, pMin, pMax)\r\n- Clamps **`pNumber`** between **`pMin`** and **`pMax`**.\r\n\r\nlerp(pStart, pEnd, pAmount)\r\n- Linearly interpolates between **`pStart`** and **`pEnd`** by **`pAmount`**.\r\n\r\nflooredLerp(pStart, pEnd, pAmount)\r\n- Linearly interpolates between **`pStart`** and **`pEnd`** by **`pAmount`**, then floors the result.\r\n\r\nround(pNumber, pPlace)\r\n- Rounds pNumber to **`pPlace`** decimal places.\r\n\r\nnormalize(pVal, pMin, pMax)\r\n- Normalizes pVal between **`pMin`** and **`pMax`**.\r\n\r\nwithin(pVal, pMin, pMax)\r\n- Checks if **`pVal`** is within the range of **`pMin`** and **`pMax`**.\r\n\r\nformatIntegerWithCommas(pNum)\r\n- Formats **`pNum`** as a string with commas between every three digits.\r\n\r\ntoRadians(pDegrees)\r\n- Converts degrees to radians.\r\n\r\ntoDegrees(pRadians)\r\n- Converts radians to degrees.\r\n\r\npick(pArray)\r\n- Returns a random element from **`pArray`**.\r\n\r\nremoveProperties(pObject, pExclude)\r\n- Removes all properties from **`pObject`**, excluding those in **`pExclude`**.\r\n\r\nprob(pChance)\r\n- Returns true with a probability of **`pChance`**, and false with a probability of **`100 - pChance`**.\r\n\r\ngetInverseDirection(pDir)\r\n- Returns the opposite direction of **`pDir`**.\r\n\r\ngetAngleFromDirection(pDir)\r\n- Returns the angle in radians corresponding to **`pDir`**.\r\n\r\ngenerateID(pIDLength)\r\n- Generates a random unique ID string of length **`pIDLength`**.\r\n\r\ndecimalToHex(pDecimal, pChars)\r\n- Converts a decimal number to a hexadecimal color string with pChars characters. **`pChars`** can either be **`3`** or **`6`**.\r\n\r\naddIntensity(pColor, pPercent)\r\n- Increases the intensity of pColor by **`pPercent`** **`percent`**.\r\n\r\nrgbToHex(pR, pG, pB)\r\n- Converts an RGB color to a hexadecimal color string.\r\n\r\nhexToRgb(pHex)\r\n- Converts a hexadecimal color string to an RGB color.\r\n\r\nrgbToDecimal(pR, pG, pB)\r\n- Converts an RGB color to a decimal number.\r\n\r\nhexToDecimal(pHex)\r\n- Converts a hexadecimal color string to a decimal number.\r\n\r\ngrabColor(pSwitch, pG, pB)\r\n- Returns a color object with a hexadecimal color string, tagless hexadecimal color string, RGB string, RGB color array, RGB normalized array, RGB object, and decimal color number. If **`pSwitch`** is a number, **`pG`** and **`pB`** must also be numbers and represent the green and blue components of the color respectively. If **`pSwitch`** is a string, it can either be a hexadecimal color string or a decimal color.\r\n\r\ngetRandomColor()\r\n- Gets a random color in the hex format.\r\n\r\ngetRandomColorBetween(pColor1, pColor2, pAmount = 0.5)\r\n- Gets a random color between **`pColor1`** and **`pColor2`** in the decimal format. **`pAmount`** can be used to change how close the returned color is to either **`pColor1`** or **`pColor2`**.\r\n\r\ntransitionColor(pInstance, pStartColor='#000', pEndColor='#fff', pDuration=1000, pIterativeCallback, pEndCallback)\r\n- Transition **`pStartColor`** to **`pEndColor`** in **`pDuration`** time with callbacks to track the animation. Where **`pIterativeCallback`** is called each frame and **`pEndCallback`** is called at the end of the animation. This API returns the **`ID`** of the transition. So that if you want to cancel it, you can use **`cancelTransitionColor(ID)`**.\r\n\r\ncancelTransitionColor(pID)\r\n- Cancels an ongoing transition with the **`ID`** of **`pID`**.\r\n\r\ngetPointRotated(pRect, pTheta, pPoint)v\r\n- Calculates the position of a point after rotating it around a center point by a given angle.\r\n- @param {object} pRect - The rectangle object to rotate the point around. pRect.anchor.x and pRecent.anchor.y is used to control the \"center\" of the rectangle.\r\n- @param {number} pTheta - The angle (in radians) to rotate the point by.\r\n- @param {object} pPoint - The point object to rotate around the center of the rectangle.\r\n- @param {number} pPoint.x - The x-coordinate of the point to rotate.\r\n- @param {number} pPoint.y - The y-coordinate of the point to rotate.\r\n- @returns {object} An object with the rotated point's new x and y coordinates.\r\n\r\ngetPointsOfRotatedRect(pRect, pTheta)\r\n- @param {object} pRect - The rectangle object to rotate the point around. **`pRect.anchor.x`** and **`pRecent.anchor.y`** is used to control the \"center\" of the rectangle.\r\n- @param {number} pTheta - The angle (in radians) to rotate the point by.\r\n- @returns {object} An object with the rotated rectangle's new corner points and center points.",
    "longname": "C:\\Users\\jared\\Documents\\Github\\EUtils\\README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\r\n  \"name\": \"utils\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"A utilities class\",\r\n  \"main\": \"utils.js\",\r\n  \"directories\": {\r\n    \"doc\": \"docs\"\r\n  },\r\n  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\r\n    \"build-dist\": \"uglifyjs src/utils.mjs -m -c --comments -o dist/utils.min.mjs && node version-handler.js && esdoc -c esdoc.json\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"git+https://github.com/EvitcaStudio/Utils\"\r\n  },\r\n  \"author\": \"https://github.com/doubleactii\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/EvitcaStudio/Utils/issues\"\r\n  },\r\n  \"homepage\": \"https://github.com/EvitcaStudio/Utils#readme\",\r\n  \"devDependencies\": {\r\n    \"esdoc\": \"^1.1.0\",\r\n    \"esdoc-ecmascript-proposal-plugin\": \"^1.0.0\",\r\n    \"esdoc-standard-plugin\": \"^1.0.0\",\r\n    \"uglify-js\": \"^3.17.4\",\r\n    \"webpack\": \"^5.89.0\",\r\n    \"webpack-cli\": \"^5.1.4\"\r\n  }\r\n}\r\n",
    "longname": "C:\\Users\\jared\\Documents\\Github\\EUtils\\package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]